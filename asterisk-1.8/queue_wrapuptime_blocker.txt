From f75c80f7cd85c1d178e07de91a25e23a683b27c1 Mon Sep 17 00:00:00 2001
From: Russell Bryant <russell@russellbryant.net>
Date: Fri, 30 Mar 2012 19:26:42 -0400
Subject: [PATCH] Queue wrapuptime blocker

---
 apps/app_queue.c         |  185 ++++++++++++++++++++++++++++++++++++++++++++-
 include/asterisk/event.h |    2 +
 include/asterisk/sched.h |    4 +
 main/event.c             |   18 +++++
 main/sched.c             |   18 +++++
 5 files changed, 222 insertions(+), 5 deletions(-)

diff --git a/apps/app_queue.c b/apps/app_queue.c
index ec13935..4aacd59 100644
--- a/apps/app_queue.c
+++ b/apps/app_queue.c
@@ -1185,10 +1185,97 @@ static AST_LIST_HEAD_STATIC(rule_lists, rule_list);
 
 static struct ao2_container *queues;
 
+static struct ast_sched_thread *sched_thread;
+
 static void update_realtime_members(struct call_queue *q);
 static int set_member_paused(const char *queuename, const char *interface, const char *reason, int paused);
 
 static void queue_transfer_fixup(void *data, struct ast_channel *old_chan, struct ast_channel *new_chan); 
+
+static enum ast_device_state queue_wrapup_blocker_cb(const char *data)
+{
+	/*
+	 * If the value isn't cached, then it's definitely NOT_INUSE.
+	 */
+	return AST_DEVICE_NOT_INUSE;
+}
+
+static void make_devstate_str(char *buf, size_t len, const char *interface)
+{
+	char *c;
+
+	snprintf(buf, len, "QueueWrapupBlocker:%s", interface);
+
+	if ((c = strchr(buf, '/'))) {
+		/*
+		 * Having a '/' in the custom device state name will break the internals
+		 * of device state processing.
+		 */
+		*c = '_';
+	}
+}
+
+static void member_answered_hook(struct member *mem)
+{
+	char buf[1024];
+
+	make_devstate_str(buf, sizeof(buf), S_OR(mem->state_interface, mem->interface));
+
+	ast_devstate_changed(AST_DEVICE_INUSE, "%s", buf);
+}
+
+static int unblock_member(const void *data)
+{
+	char *mem_state_interface = (char *) data;
+	char buf[1024];
+
+	make_devstate_str(buf, sizeof(buf), mem_state_interface);
+	ast_devstate_changed(AST_DEVICE_NOT_INUSE, "%s", buf);
+
+	ast_free(mem_state_interface);
+
+	return 0;
+}
+
+static void member_hangup_hook(struct member *mem, struct call_queue *q)
+{
+	char *mem_state_interface;
+	int res;
+
+	if (!(mem_state_interface = ast_strdup(S_OR(mem->state_interface, mem->interface)))) {
+		ast_log(LOG_ERROR, "Memory allocation failed.  Queue wrapup blocker state will be incorrect.\n");
+		return;
+	}
+
+	if (!q->wrapuptime) {
+		unblock_member(mem_state_interface);
+		return;
+	}
+
+	res = ast_sched_thread_add(sched_thread, q->wrapuptime * 1000, unblock_member, mem_state_interface);
+	if (res == -1) {
+		ast_log(LOG_ERROR, "Failed to schedule wrapuptime ublock, unblocking now.\n");
+		unblock_member(mem_state_interface);
+	}
+}
+
+/*!
+ * \internal
+ * \retval non-zero blocker active
+ * \retval 0 blocker not active
+ */
+static int check_queue_wrapup_blocker(struct member *mem)
+{
+	char buf[1024];
+	enum ast_device_state state;
+
+	make_devstate_str(buf, sizeof(buf), S_OR(mem->state_interface, mem->interface));
+
+	state = ast_device_state(buf);
+
+	return state == AST_DEVICE_INUSE;
+}
+
 /*! \brief sets the QUEUESTATUS channel variable */
 static void set_queue_result(struct ast_channel *chan, enum queue_result res)
 {
@@ -1394,6 +1481,9 @@ static int get_member_status(struct call_queue *q, int max_penalty, int min_pena
 			} else if ((conditions & QUEUE_EMPTY_WRAPUP) && member->lastcall && q->wrapuptime && (time(NULL) - q->wrapuptime < member->lastcall)) {
 				ast_debug(4, "%s is unavailable because it has only been %d seconds since his last call (wrapup time is %d)\n", member->membername, (int) (time(NULL) - member->lastcall), q->wrapuptime);
 				break;
+			} else if (check_queue_wrapup_blocker(member)) {
+				ast_debug(4, "%s is unavailable because the wrapup blocker is active.\n", member->membername);
+				break;
 			} else {
 				ao2_ref(member, -1);
 				ao2_iterator_destroy(&mem_iter);
@@ -2868,7 +2958,7 @@ static int num_available_members(struct call_queue *q)
 			/* else fall through */
 		case AST_DEVICE_NOT_INUSE:
 		case AST_DEVICE_UNKNOWN:
-			if (!mem->paused) {
+			if (!mem->paused && !check_queue_wrapup_blocker(mem)) {
 				avl++;
 			}
 			break;
@@ -3018,6 +3108,14 @@ static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies
 		return 0;
 	}
 
+	if (check_queue_wrapup_blocker(tmp->member)) {
+		ast_debug(1, "%s still wrapping up (determined using distributed wrapup blocker)\n", tmp->interface);
+		if (qe->chan->cdr)
+			ast_cdr_busy(qe->chan->cdr);
+		tmp->stillgoing = 0;
+		return 0;
+	}
+
 	if (tmp->member->paused) {
 		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
 		if (qe->chan->cdr)
@@ -5035,10 +5133,14 @@ static int try_calling(struct queue_ent *qe, const char *options, char *announce
 			queue_t_ref(qe->parent, "For bridge_config reference");
 		}
 
+		member_answered_hook(member);
+
 		time(&callstart);
 		transfer_ds = setup_transfer_datastore(qe, member, callstart, callcompletedinsl);
 		bridge = ast_bridge_call(qe->chan,peer, &bridge_config);
 
+		member_hangup_hook(member, qe->parent);
+
 		/* If the queue member did an attended transfer, then the TRANSFER already was logged in the queue_log
 		 * when the masquerade occurred. These other "ending" queue_log messages are unnecessary, except for
 		 * the AgentComplete manager event
@@ -6189,7 +6291,7 @@ static int queue_function_qac(struct ast_channel *chan, const char *cmd, char *d
 			mem_iter = ao2_iterator_init(q->members, 0);
 			while ((m = ao2_iterator_next(&mem_iter))) {
 				/* Count the agents who are logged in and presently answering calls */
-				if ((m->status == AST_DEVICE_NOT_INUSE) && (!m->paused)) {
+				if ((m->status == AST_DEVICE_NOT_INUSE) && (!m->paused) && !check_queue_wrapup_blocker(m)) {
 					count++;
 				}
 				ao2_ref(m, -1);
@@ -6201,7 +6303,7 @@ static int queue_function_qac(struct ast_channel *chan, const char *cmd, char *d
 			mem_iter = ao2_iterator_init(q->members, 0);
 			while ((m = ao2_iterator_next(&mem_iter))) {
 				/* Count the agents who are logged in, not paused and not wrapping up */
-				if ((m->status == AST_DEVICE_NOT_INUSE) && (!m->paused) &&
+				if ((m->status == AST_DEVICE_NOT_INUSE) && (!m->paused) && !check_queue_wrapup_blocker(m) &&
 						!(m->lastcall && q->wrapuptime && ((now - q->wrapuptime) < m->lastcall))) {
 					count++;
 				}
@@ -6248,7 +6350,7 @@ static int queue_function_qac_dep(struct ast_channel *chan, const char *cmd, cha
 		mem_iter = ao2_iterator_init(q->members, 0);
 		while ((m = ao2_iterator_next(&mem_iter))) {
 			/* Count the agents who are logged in and presently answering calls */
-			if ((m->status != AST_DEVICE_UNAVAILABLE) && (m->status != AST_DEVICE_INVALID)) {
+			if ((m->status != AST_DEVICE_UNAVAILABLE) && (m->status != AST_DEVICE_INVALID) && !check_queue_wrapup_blocker(m)) {
 				count++;
 			}
 			ao2_ref(m, -1);
@@ -7146,7 +7248,7 @@ static int manager_queues_summary(struct mansession *s, const struct message *m)
 			while ((mem = ao2_iterator_next(&mem_iter))) {
 				if ((mem->status != AST_DEVICE_UNAVAILABLE) && (mem->status != AST_DEVICE_INVALID)) {
 					++qmemcount;
-					if (((mem->status == AST_DEVICE_NOT_INUSE) || (mem->status == AST_DEVICE_UNKNOWN)) && !(mem->paused)) {
+					if (((mem->status == AST_DEVICE_NOT_INUSE) || (mem->status == AST_DEVICE_UNKNOWN)) && !(mem->paused) && !check_queue_wrapup_blocker(mem)) {
 						++qmemavail;
 					}
 				}
@@ -7911,6 +8013,67 @@ static char *handle_queue_reset(struct ast_cli_entry *e, int cmd, struct ast_cli
 	return CLI_SUCCESS;
 }
 
+static void sched_dump_cb(void *data, ast_sched_cb cb, const void *sched_data, struct timeval delta)
+{
+	struct ast_cli_args *a = data;
+
+	ast_cli(a->fd, "%s | %.6ld : %.6ld\n",
+			(const char *) sched_data,
+			(long) delta.tv_sec,
+			(long) delta.tv_usec / 1000);
+}
+
+static char *handle_queue_sched_dump(struct ast_cli_entry *e, int cmd, struct ast_cli_args *a)
+{
+	switch (cmd) {
+	case CLI_INIT:
+		e->command = "queue sched dump";
+		e->usage =
+			"Usage: queue sched dump\n"
+			"\n"
+			"Dump app_queue scheduler contents to DEBUG log\n";
+		return NULL;
+	case CLI_GENERATE:
+		return NULL;
+	}
+
+	if (a->argc != e->args) {
+		return CLI_SHOWUSAGE;
+	}
+
+	ast_cli(a->fd, "Device | Time left blocked (sec:ms)\n");
+	ast_cli(a->fd, "-----------------------------------\n");
+	ast_sched_dump_cb(ast_sched_thread_get_context(sched_thread), sched_dump_cb, a);
+	ast_cli(a->fd, "\n");
+
+	return CLI_SUCCESS;
+}
+
+static char *handle_queue_wrapupblocker_reset(struct ast_cli_entry *e, int cmd, struct ast_cli_args *a)
+{
+	switch (cmd) {
+	case CLI_INIT:
+		e->command = "queue wrapupblocker reset";
+		e->usage =
+			"Usage: queue wrapupblocker reset\n"
+			"\n"
+			"Reset the queue wrapuptime blocker\n";
+		return NULL;
+	case CLI_GENERATE:
+		return NULL;
+	}
+
+	if (a->argc != e->args) {
+		return CLI_SHOWUSAGE;
+	}
+
+	ast_event_erase_devstate_cache("QueueWrapupBlocker");
+
+	ast_cli(a->fd, "Queue wrapuptime blocker cache reset.\n");
+
+	return CLI_SUCCESS;
+}
+
 static char *handle_queue_reload(struct ast_cli_entry *e, int cmd, struct ast_cli_args *a)
 {
 	struct ast_flags mask = {0,};
@@ -7987,6 +8150,8 @@ static struct ast_cli_entry cli_queue[] = {
 	AST_CLI_DEFINE(handle_queue_rule_show, "Show the rules defined in queuerules.conf"),
 	AST_CLI_DEFINE(handle_queue_reload, "Reload queues, members, queue rules, or parameters"),
 	AST_CLI_DEFINE(handle_queue_reset, "Reset statistics for a queue"),
+	AST_CLI_DEFINE(handle_queue_sched_dump, "Dump app_queue scheduler contents to DEBUG log"),
+	AST_CLI_DEFINE(handle_queue_wrapupblocker_reset, "Reset queue wrapupblocker"),
 };
 
 /* struct call_queue astdata mapping. */
@@ -8311,6 +8476,8 @@ static int unload_module(void)
 	ao2_ref(queues, -1);
 	devicestate_tps = ast_taskprocessor_unreference(devicestate_tps);
 	ast_unload_realtime("queue_members");
+	sched_thread = ast_sched_thread_destroy(sched_thread);
+	ast_devstate_prov_del("QueueWrapupBlocker");
 	return res;
 }
 
@@ -8320,6 +8487,14 @@ static int load_module(void)
 	struct ast_context *con;
 	struct ast_flags mask = {AST_FLAGS_ALL, };
 
+	if (!(sched_thread = ast_sched_thread_create())) {
+		return AST_MODULE_LOAD_DECLINE;
+	}
+
+	if (ast_devstate_prov_add("QueueWrapupBlocker", queue_wrapup_blocker_cb)) {
+		return AST_MODULE_LOAD_DECLINE;
+	}
+
 	queues = ao2_container_alloc(MAX_QUEUE_BUCKETS, queue_hash_cb, queue_cmp_cb);
 
 	use_weight = 0;
diff --git a/include/asterisk/event.h b/include/asterisk/event.h
index 90e27b2..8f224b9 100644
--- a/include/asterisk/event.h
+++ b/include/asterisk/event.h
@@ -750,6 +750,8 @@ uint16_t ast_event_iterator_get_ie_raw_payload_len(struct ast_event_iterator *it
  */
 size_t ast_event_minimum_length(void);
 
+void ast_event_erase_devstate_cache(const char *prefix);
+
 #if defined(__cplusplus) || defined(c_plusplus)
 }
 #endif
diff --git a/include/asterisk/sched.h b/include/asterisk/sched.h
index 4f5fb42..bbf3c2a 100644
--- a/include/asterisk/sched.h
+++ b/include/asterisk/sched.h
@@ -282,6 +282,10 @@ int ast_sched_runq(struct sched_context *con);
  */
 void ast_sched_dump(struct sched_context *con);
 
+typedef void (*ast_sched_dump_cb_fn)(void *data, ast_sched_cb cb, const void *sched_data, struct timeval delta);
+
+void ast_sched_dump_cb(struct sched_context *con, ast_sched_dump_cb_fn cb, void *data);
+
 /*! \brief Returns the number of seconds before an event takes place
  * \param con Context to use
  * \param id Id to dump
diff --git a/main/event.c b/main/event.c
index e8af16a..6fc65f7 100644
--- a/main/event.c
+++ b/main/event.c
@@ -1768,6 +1768,24 @@ static char *event_dump_cache(struct ast_cli_entry *e, int cmd, struct ast_cli_a
 	return CLI_SUCCESS;
 }
 
+static int match_device_prefix(void *obj, void *arg, int flags)
+{
+	struct ast_event_ref *event_ref = obj;
+	const char *prefix = arg;
+	const char *device;
+
+	device = ast_event_get_ie_str(event_ref->event, AST_EVENT_IE_DEVICE);
+
+	return strncasecmp(device, prefix, strlen(prefix)) ? 0 : CMP_MATCH;
+}
+
+void ast_event_erase_devstate_cache(const char *prefix)
+{
+	ao2_callback(ast_event_cache[AST_EVENT_DEVICE_STATE].container, OBJ_NODATA | OBJ_UNLINK | OBJ_MULTIPLE, match_device_prefix, (void *) prefix);
+	ao2_callback(ast_event_cache[AST_EVENT_DEVICE_STATE_CHANGE].container, OBJ_NODATA | OBJ_UNLINK | OBJ_MULTIPLE, match_device_prefix, (void *) prefix);
+}
+
+
 static struct ast_cli_entry event_cli[] = {
 	AST_CLI_DEFINE(event_dump_cache, "Dump the internal event cache (for debugging)"),
 };
diff --git a/main/sched.c b/main/sched.c
index b27358c..90fbc08 100644
--- a/main/sched.c
+++ b/main/sched.c
@@ -590,6 +590,24 @@ void ast_sched_dump(struct sched_context *con)
 	ast_debug(1, "=============================================================\n");
 }
 
+void ast_sched_dump_cb(struct sched_context *con, ast_sched_dump_cb_fn cb, void *data)
+{
+	struct sched *q;
+	struct timeval when = ast_tvnow();
+	int x;
+	size_t heap_size;
+
+	ast_mutex_lock(&con->lock);
+	heap_size = ast_heap_size(con->sched_heap);
+	for (x = 1; x <= heap_size; x++) {
+		struct timeval delta;
+		q = ast_heap_peek(con->sched_heap, x);
+		delta = ast_tvsub(q->when, when);
+		cb(data, q->callback, q->data, delta);
+	}
+	ast_mutex_unlock(&con->lock);
+}
+
 /*! \brief
  * Launch all events which need to be run at this time.
  */
-- 
1.7.7.6

